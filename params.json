{"name":"Termsql","tagline":"Convert text from a file or from stdin into SQL table and query it instantly. Uses sqlite as backend. The idea is to make SQL into a tool on the command line or in scripts.","body":"<H1>TERMSQL</H1>\r\nSection: User Commands (1)<BR>Updated: November 2014<BR><A HREF=\"#index\">Index</A>\r\n<A HREF=\"/man/man2html\">Return to Main Contents</A><HR>\r\n\r\n<A NAME=\"lbAB\">&nbsp;</A>\r\n<H2>NAME</H2>\r\n\r\ntermsql - manual page for termsql 0.3\r\n<A NAME=\"lbAC\">&nbsp;</A>\r\n<H2>DESCRIPTION</H2>\r\n\r\nusage: termsql [-h] [-1] [-d [DELIMITER]] [-p [SEPARATOR]]\r\n<DL COMPACT>\r\n<DT><DD>\r\n[-l [LINE_AS_COLUMN]] [-k [KEY_COLUMNS]] [-c [COLUMNS]]\r\n[--calc [CALC]] [-w] [-H [OFFSET_HEAD]] [-T [OFFSET_TAIL]]\r\n[-M [MAX_ROWS]] [-C] [-D] [-m [MODE]] [-r [MERGE]] [-x] [-a]\r\n[-i [INFILE]] [-o [OUTFILE]] [-f [FILE]] [-e] [-q [QUERYFILE]]\r\n[-t [TABLE]] [-s [SQLITE]] [-v]\r\n[query]\r\n</DL>\r\n<P>\r\n\r\nConvert text into SQL table and query it\r\n<A NAME=\"lbAD\">&nbsp;</A>\r\n<H3>positional arguments:</H3>\r\n\r\n<DL COMPACT>\r\n<DT>query<DD>\r\nSQL Query string\r\n</DL>\r\n<A NAME=\"lbAE\">&nbsp;</A>\r\n<H3>optional arguments:</H3>\r\n\r\n<DL COMPACT>\r\n<DT><B>-h</B>, <B>--help</B><DD>\r\nshow this help message and exit\r\n<DT><B>-1</B>, <B>--head</B><DD>\r\nuse first line/head(er) for column names\r\n<DT><B>-d</B> [DELIMITER], <B>--delimiter</B> [DELIMITER]<DD>\r\ncustom delimiter (default is whitespace)\r\n<DT><B>-p</B> [SEPARATOR], <B>--separator</B> [SEPARATOR]<DD>\r\nset sqlite output field separator (default depends on\r\noutput mode. ie. for list '|' is the default and for\r\ncsv ',' is the default)\r\n<DT><B>-l</B> [LINE_AS_COLUMN], <B>--line-as-column</B> [LINE_AS_COLUMN]<DD>\r\neach line of input is a whole column, next row begins\r\nafter n lines\r\n<DT><B>-k</B> [KEY_COLUMNS], <B>--key-columns</B> [KEY_COLUMNS]<DD>\r\none or more columns can make up the primary key (i.e\r\n<B>-k</B> COL0 or <B>-c</B> one,two,three <B>-k</B> one,two)\r\n<DT><B>-c</B> [COLUMNS], <B>--columns</B> [COLUMNS]<DD>\r\nset custom column names (ie. <B>-c</B> 'name,street,age')\r\n<DT><B>--calc</B> [CALC]<DD>\r\nuse sqlite as simple calculator, you can do multiple\r\ncalculations separated by commata (i.e. &quot;(5*109.05)/2\r\n, 345+789&quot;) In this mode stdin input is ignored\r\n<DT><B>-w</B>, <B>--whitespace</B><DD>\r\nuse whitespace as field separator (default is |).\r\nequal to mode column\r\n<DT><B>-H</B> [OFFSET_HEAD], <B>--offset-head</B> [OFFSET_HEAD]<DD>\r\nignore first n lines of input\r\n<DT><B>-T</B> [OFFSET_TAIL], <B>--offset-tail</B> [OFFSET_TAIL]<DD>\r\nignore last n lines of input\r\n<DT><B>-M</B> [MAX_ROWS], <B>--max-rows</B> [MAX_ROWS]<DD>\r\ndon't insert more than n rows into database\r\n<DT><B>-C</B>, <B>--dump-create-table</B><DD>\r\ndump create table SQL\r\n<DT><B>-D</B>, <B>--dump</B><DD>\r\ndump complete SQL to create table and content\r\n<DT><B>-m</B> [MODE], <B>--mode</B> [MODE]<DD>\r\nset sqlite output mode i.e.: csv, column, html,\r\ninsert, line, list, tabs, tcl (default is list)\r\n<DT><B>-r</B> [MERGE], <B>--merge</B> [MERGE]<DD>\r\nmerges all columns from column n to the last one into\r\none. This is useful when you have data like filenames\r\nwith whitespaces in it, to prevent it from getting\r\nsplit by the delimiter. Note that counting starts from\r\n0, therefore n=0 is the first column ...\r\n<DT><B>-x</B>, <B>--select-all</B><DD>\r\nadd final SELECT * FROM to user defined query\r\n<DT><B>-a</B>, <B>--append</B><DD>\r\ndon't DROP TABLE instead just append data to existing\r\ntable. If the existing table doesn't have enough\r\ncolumns it will be ALTERed accordingly, if possible\r\n<DT><B>-i</B> [INFILE], <B>--infile</B> [INFILE]<DD>\r\nuse file as input instead of stdin\r\n<DT><B>-o</B> [OUTFILE], <B>--outfile</B> [OUTFILE]<DD>\r\nlocation/filename to use for sql database (by default\r\na tempfile is used)\r\n<DT><B>-f</B> [FILE], <B>--file</B> [FILE]<DD>\r\nwrite output to file instead of stdout. It's\r\noverwriting the whole file, and not just appending, so\r\nplease be cautious\r\n<DT><B>-e</B>, <B>--edit</B><DD>\r\nwrites to the input file instead of stdout. For this\r\nto work the input file has to be specified with the\r\n<B>-i</B>/--infile option. It's overwriting the whole file,\r\nand not just appending, so please be cautious\r\n<DT><B>-q</B> [QUERYFILE], <B>--queryfile</B> [QUERYFILE]<DD>\r\nload complex query from file, queries on the\r\ncommandline get executed last\r\n<DT><B>-t</B> [TABLE], <B>--table</B> [TABLE]<DD>\r\ntablename (must be a valid sqlite tablename)\r\n<DT><B>-s</B> [SQLITE], <B>--sqlite</B> [SQLITE]<DD>\r\npath to sqlite executable\r\n<DT><B>-v</B>, <B>--version</B><DD>\r\ndisplay version information\r\n</DL>\r\n<A NAME=\"lbAF\">&nbsp;</A>\r\n<H3>examples:</H3>\r\n\r\n<DL COMPACT>\r\n<DT>\r\n<B>--</B> ps aux | termsql &quot;select * from tbl where COL0='root' limit 5&quot;\r\n<DT><DD>\r\n<TT>&gt; outputs 5 processes that are running as root</TT>\r\n<DT>\r\n<B>--</B> df | termsql <B>-1</B> 'select Filesystem from tbl order by [1K-blocks] desc limit 1'\r\n<DT><DD>\r\n<TT>&gt; returns the largest device</TT>\r\n<DT>\r\n<B>--</B> cat <I>/proc/cpuinfo</I> | termsql &quot;select COL2 from tbl where COL0='bogomips'&quot;\r\n<DT><DD>\r\n<TT>&gt; how many bogomips does your system have?</TT>\r\n<DT>\r\n<B>--</B> termsql <B>--infile</B> <I>/etc/group</I> <B>-d</B> ':' &quot;select COL0 from tbl&quot;\r\n<DT><DD>\r\n<TT>&gt; read from file, use : as delimiter, shows all groups in /etc/group</TT>\r\n<DT>\r\n<B>--</B> termsql <B>-i</B> MyCSVFile.CSV <B>-t</B> fancytable <B>-d</B> ',' <B>-1</B> <B>-o</B> mysqlite.db\r\n<DT><DD>\r\n<TT>&gt; creates a new sqlite database from a CSV file. -d ',' tells termsql to use commata as delimiter. -1 tells termsql that the first line of the CSV file is not data and instead the column names and termsql creates database columns with those names accordingly. -t fancytable sets the tablename to fancytable</TT>\r\n<DT>\r\n<B>--</B> sensors | termsql &quot;select COL2 from tbl where COL0='Core'&quot;\r\n<DT><DD>\r\n<TT>&gt; extract the temperature from all your CPU cores</TT>\r\n<DT>\r\n<B>--</B> export LC_ALL=en_US; top <B>-b</B> | head | termsql <B>-1</B> <B>-H</B> 6 &quot;select [PID],[USER],[COMMAND],[%CPU] from tbl where [%CPU]&gt;=25&quot;\r\n<DT><DD>\r\n<TT>&gt; termsql doesn't recognize numbers like &quot;25,3&quot; as numbers, but as strings. export LC_ALL=en_US ensures that top outputs numbers that are easy for termsql/sqlite to digest (ie. &quot;25.3&quot;). -H 6 makes termsql disregard the first 6 lines. We select only the processes with more than 25% cpu usage and output their PID,USER,COMMAND and %CPU.</TT>\r\n<DT>\r\n<B>--</B> export DISPLAY=$(ps aux | termsql &quot;select COL11 from tbl where COL10 like '%Xorg.bin%' limit 1&quot;)\r\n<DT><DD>\r\n<TT>&gt; set DISPLAY environment variable to what display X is running on right now, assuming that the X binary is called &quot;Xorg.bin&quot;)</TT>\r\n<DT>\r\n<B>--</B> ls <B>-lha</B> /usr/bin/* | termsql <B>-w</B> <B>-r</B> 8 &quot;select * from tbl order by COL8 desc&quot;\r\n<DT><DD>\r\n<TT>&gt; -r 8 merges the filenames into the 8th column. Then &quot;order by COL8 desc&quot; sorts them in reverse order. Due to -w the output looks nice on the command line</TT>\r\n<DT>\r\n<B>--</B> termsql <B>-m</B> line <B>--calc</B> 2+2,23423./123\r\n<DT><DD>\r\n<TT>&gt; To use termsql as simple a calculator with the power of sqlite behind it, use the --calc option and a commata separated list of calculations you want to do. Sometimes you may need to append a dot . to a number to make sqlite aware that it's supposed to do floating point calculation. If you want to use paranthesis you may also need to use  quotes like this --calc &quot;(2+2,23423./123)&quot;. The -m line option beautifies the output.</TT>\r\n<DT>\r\n<B>--</B> cat <I>/etc/fstab</I> | termsql &quot;select COUNT(*) from tbl where COL2='ext4'&quot;\r\n<DT><DD>\r\n<TT>&gt; how many devices do you have in your fstab that are using the ext4 filesystem? COUNT(*) simply outputs the total number of rows that the current select/where statement would select.</TT>\r\n<DT>\r\n<B>--</B> ps aux | termsql <B>-m</B> line <B>-1</B> &quot;select USER,COUNT(*) from tbl group by USER&quot;\r\n<DT><DD>\r\n<TT>&gt; counts the total number of processes that each user has running. -1 gets the column names from the first line, therefore we can use USER instead of COL0 in the SQL statement. &quot;group by USER&quot; groups the rows of with identical USER together and for that reason COUNT(*) returns the total number of rows (in this case processes) for each USER. -m line beautifies the output.</TT>\r\n<DT>\r\n<B>--</B> termsql <B>-ei</B> .config/Bitcoin/Bitcoin-Qt.conf <B>-c</B> key,value <B>-d</B> = <B>-p</B> = <B>-x</B> &quot;update tbl set value='true' where key='fMinimizeToTray'&quot;\r\n<DT><DD>\r\n<TT>&gt; Demonstrates how you can use termsql to edit simple config files with key/value pairs. -i loads the config file as input and -e makes sure this same file is written to instead of stdout. Simply speaking: enabling edit mode. -d = sets the delimiter for splitting the input to = and -p = sets the separator for the output to = again, so that the output format matches the input format. -x appends a &quot;;select * from tbl&quot; to the user defined query, so that we get everything back that we put in. The user query is an SQL update statement which sets the value part of the key value pair to true, where the key is fMinimizeToTray. -c key,value allows us to use these convenient names instead of COL0 (key) and COL1 (value). Note that this approach may not always be perfect, for example in .config/Bitcoin/Bitcoin-Qt.conf there's a section line &quot;[General]&quot; which gets changed to &quot;[General]=&quot; after termsql is done with editing. Which may or may not be a problem depending on the program that uses the config file. It could easily be fixed with a tool like sed though.</TT>\r\n<P>\r\n</DL>\r\n\r\n<HR>\r\n<A NAME=\"index\">&nbsp;</A><H2>Index</H2>\r\n<DL>\r\n<DT><A HREF=\"#lbAB\">NAME</A><DD>\r\n<DT><A HREF=\"#lbAC\">DESCRIPTION</A><DD>\r\n<DL>\r\n<DT><A HREF=\"#lbAD\">positional arguments:</A><DD>\r\n<DT><A HREF=\"#lbAE\">optional arguments:</A><DD>\r\n<DT><A HREF=\"#lbAF\">examples:</A><DD>\r\n</DL>\r\n</DL>\r\n<HR>\r\nThis document was created by\r\n<A HREF=\"/man/man2html\">man2html</A>,\r\nusing the manual pages.<BR>\r\nTime: 19:21:13 GMT, November 25, 2014","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}